package com.example.glucodialog.ui.screens

import androidx.compose.animation.core.LinearOutSlowInEasing
import androidx.compose.animation.core.animate
import androidx.compose.animation.core.tween
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import com.example.glucodialog.data.*
import com.example.glucodialog.data.relations.*
import com.example.glucodialog.ui.components.AnimatedLineChart
import com.example.glucodialog.ui.components.DashboardStatCard
import java.util.*

@Composable
fun Dashboard(
    glucoseEntries: List<GlucoseEntry>,
    foodEntriesWithItems: List<FoodEntryWithItem>,
    insulinEntriesWithTypes: List<InsulinEntryWithType>,
    activityEntriesWithTypes: List<ActivityEntryWithType>,
    medicationEntriesWithTypes: List<MedicationEntryWithType>
) {

    var animationProgress by remember { mutableStateOf(0f) }
    LaunchedEffect(glucoseEntries, foodEntriesWithItems, insulinEntriesWithTypes, activityEntriesWithTypes, medicationEntriesWithTypes) {
        animate(
            initialValue = 0f,
            targetValue = 1f,
            animationSpec = tween(durationMillis = 1200, easing = LinearOutSlowInEasing)
        ) { value, _ ->
            animationProgress = value
        }
    }

    val alpha = animationProgress
    val offsetY = (1 - animationProgress) * 50f


    val recentGlucose = glucoseEntries.takeLast(10)
    val averageGlucose = if (recentGlucose.isNotEmpty())
        recentGlucose.map { it.glucoseLevel }.average().toFloat()
    else 0f

    val inRangeCount = recentGlucose.count { it.glucoseLevel in 4.0..7.0 }
    val timeInRange = if (recentGlucose.isNotEmpty())
        inRangeCount.toFloat() / recentGlucose.size * 100
    else 0f

    val today = Calendar.getInstance()

    val todayMeals = foodEntriesWithItems.filter {
        val cal = Calendar.getInstance().apply { timeInMillis = it.entry.timestamp }
        cal.get(Calendar.DAY_OF_YEAR) == today.get(Calendar.DAY_OF_YEAR)
    }
    val todayInsulin = insulinEntriesWithTypes.filter {
        val cal = Calendar.getInstance().apply { timeInMillis = it.entry.timestamp }
        cal.get(Calendar.DAY_OF_YEAR) == today.get(Calendar.DAY_OF_YEAR)
    }
    val todayActivities = activityEntriesWithTypes.filter {
        val cal = Calendar.getInstance().apply { timeInMillis = it.entry.timestamp }
        cal.get(Calendar.DAY_OF_YEAR) == today.get(Calendar.DAY_OF_YEAR)
    }
    val todayMedications = medicationEntriesWithTypes.filter {
        val cal = Calendar.getInstance().apply { timeInMillis = it.entry.timestamp }
        cal.get(Calendar.DAY_OF_YEAR) == today.get(Calendar.DAY_OF_YEAR)
    }

    val totalTodayCarbs = todayMeals.sumOf { it.foodItem.carbs * it.entry.quantity }
    val totalTodayInsulin = todayInsulin.sumOf { it.entry.doseUnits }.toFloat()
    val totalActivityMinutes = todayActivities.sumOf { it.entry.durationMinutes }
    val totalMedications = todayMedications.size

    val mmolEntries = glucoseEntries.map { entry ->
        if (entry.unit == "–º–≥/–¥–ª") entry.glucoseLevel / 18.0 else entry.glucoseLevel
    }
    val avgGlucose = mmolEntries.average()
    val minGlucose = mmolEntries.minOrNull() ?: 0.0
    val maxGlucose = mmolEntries.maxOrNull() ?: 0.0
    val measurementsPerDay = glucoseEntries.groupBy {
        val cal = Calendar.getInstance().apply { timeInMillis = it.timestamp }
        "${cal.get(Calendar.YEAR)}-${cal.get(Calendar.DAY_OF_YEAR)}"
    }.mapValues { it.value.size }
    val avgDailyMeasurements = measurementsPerDay.values.average()
    val estimatedHbA1c = (avgGlucose + 2.59) / 1.59

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .offset(y = offsetY.dp)
                .alpha(alpha),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            DashboardStatCard(
                icon = "ü©∏",
                title = "–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å",
                value = recentGlucose.lastOrNull()?.let { "${it.glucoseLevel} ${it.unit}" } ?: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                subtitle = glucoseStatus(recentGlucose.lastOrNull()?.glucoseLevel),
                color = when (glucoseStatus(recentGlucose.lastOrNull()?.glucoseLevel)) {
                    "–ù–∏–∑–∫–∏–π" -> Color.Blue
                    "–í –Ω–æ—Ä–º–µ" -> Color.Green
                    "–í—ã—Å–æ–∫–∏–π" -> Color(0xFFFFA500)
                    "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π" -> Color.Red
                    else -> Color.Gray
                },
                modifier = Modifier.weight(1f)
            )

            DashboardStatCard(
                icon = "üìä",
                title = "–°—Ä–µ–¥–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)",
                value = if (averageGlucose > 0) "%.1f".format(averageGlucose) else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                subtitle = null,
                color = Color(0xFF4CAF50),
                modifier = Modifier.weight(1f)
            )
        }

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .offset(y = offsetY.dp)
                .alpha(alpha),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            DashboardStatCard(
                icon = "‚è±Ô∏è",
                title = "–í—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ",
                value = "${timeInRange.toInt()}%",
                subtitle = "4.0-7.0 –º–º–æ–ª—å/–ª",
                color = Color(0xFF4CAF50),
                modifier = Modifier.weight(1f)
            )

            DashboardStatCard(
                icon = "üçΩÔ∏è",
                title = "–°–µ–≥–æ–¥–Ω—è",
                value = "–£–≥–ª–µ–≤–æ–¥—ã: ${"%.1f".format(totalTodayCarbs)} –≥\n–ò–Ω—Å—É–ª–∏–Ω: ${"%.1f".format(totalTodayInsulin)} –µ–¥",
                subtitle = null,
                color = Color(0xFF03A9F4),
                modifier = Modifier.weight(1f)
            )
        }

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .offset(y = offsetY.dp)
                .alpha(alpha),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            DashboardStatCard(
                icon = "üèÉ‚Äç‚ôÇÔ∏è",
                title = "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                value = "$totalActivityMinutes –º–∏–Ω",
                subtitle = "–°–µ–≥–æ–¥–Ω—è",
                color = Color(0xFFFFC107),
                modifier = Modifier.weight(1f)
            )

            DashboardStatCard(
                icon = "üíä",
                title = "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞",
                value = "$totalMedications –∑–∞–ø–∏—Å–µ–π",
                subtitle = "–°–µ–≥–æ–¥–Ω—è",
                color = Color(0xFFFF5722),
                modifier = Modifier.weight(1f)
            )
        }

        if (glucoseEntries.isEmpty()) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp),
                colors = CardDefaults.cardColors(containerColor = Color(0xFFE3F2FD)),
                shape = RoundedCornerShape(12.dp)
            ) {
                Column(
                    modifier = Modifier.padding(24.dp),
                    verticalArrangement = Arrangement.spacedBy(12.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text("ü©∏", style = MaterialTheme.typography.headlineLarge)
                    Text(
                        "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–ª—é–∫–æ–∑–µ",
                        style = MaterialTheme.typography.titleMedium,
                        color = Color.Black
                    )
                    Text(
                        "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥—Ä–∞—Ñ–∏–∫.",
                        style = MaterialTheme.typography.bodyMedium,
                        color = Color.Gray
                    )
                }
            }
        } else {

            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .offset(y = offsetY.dp)
                    .alpha(alpha),
                colors = CardDefaults.cardColors(containerColor = Color(0xFFF3E5F5))
            ) {
                Column(
                    modifier = Modifier.padding(16.dp),
                    verticalArrangement = Arrangement.spacedBy(4.dp)
                ) {
                    Text("–ì–ª—é–∫–æ–∑–∞ (–º–º–æ–ª—å/–ª)", style = MaterialTheme.typography.titleMedium)
                    Text("–°—Ä–µ–¥–Ω—è—è: %.2f".format(avgGlucose))
                    Text("–ú–∏–Ω/–ú–∞–∫—Å: %.1f / %.1f".format(minGlucose, maxGlucose))
                    Text("–ò–∑–º–µ—Ä–µ–Ω–∏–π –≤ –¥–µ–Ω—å: %.1f".format(avgDailyMeasurements))
                    Text("HbA1c (‚âà): %.2f %%".format(estimatedHbA1c))
                }
            }


            if (glucoseEntries.size < 2) {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp),
                    colors = CardDefaults.cardColors(containerColor = Color(0xFFFFF3E0)),
                    shape = RoundedCornerShape(12.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(24.dp),
                        verticalArrangement = Arrangement.spacedBy(12.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text("üìâ", style = MaterialTheme.typography.headlineLarge)
                        Text(
                            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞",
                            style = MaterialTheme.typography.titleMedium,
                            color = Color.Black
                        )
                        Text(
                            "–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –≥–ª—é–∫–æ–∑—ã, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –¥–∏–Ω–∞–º–∏–∫—É.",
                            style = MaterialTheme.typography.bodyMedium,
                            color = Color.Gray
                        )
                    }
                }
            } else {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .offset(y = offsetY.dp)
                        .alpha(alpha),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        Text("üìà –î–∏–Ω–∞–º–∏–∫–∞ —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã", style = MaterialTheme.typography.titleMedium)
                        Spacer(Modifier.height(12.dp))
                        val sortedGlucoseEntries = glucoseEntries.sortedBy { it.timestamp }

                        AnimatedLineChart(
                            values = sortedGlucoseEntries.map { entry ->
                                if (entry.unit == "–º–≥/–¥–ª") entry.glucoseLevel.toFloat() / 18f else entry.glucoseLevel.toFloat()
                            },
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(200.dp)
                        )
                    }
                }
            }
        }
    }
}

fun glucoseStatus(value: Double?): String {
    return when {
        value == null -> "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        value < 4.0 -> "–ù–∏–∑–∫–∏–π"
        value <= 7.0 -> "–í –Ω–æ—Ä–º–µ"
        value <= 10.0 -> "–í—ã—Å–æ–∫–∏–π"
        else -> "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"
    }
}